From 1b2503e68721af1db6d6e06a806882a7da7f69d7 Mon Sep 17 00:00:00 2001
From: srinath <srinathreddib@gmail.com>
Date: Sat, 20 Jun 2015 18:22:09 -0400
Subject: [PATCH] Using only plaintext keyring for storing all the credentials

---
 src/ipoplib.py | 127 ++-------------------------------------------------------
 1 file changed, 4 insertions(+), 123 deletions(-)

diff --git a/src/ipoplib.py b/src/ipoplib.py
index 563e9fc..a8bbb2a 100755
--- a/src/ipoplib.py
+++ b/src/ipoplib.py
@@ -17,124 +17,8 @@ import sys
 import time
 import urllib2
 import keyring
-import base64
-import traceback
 
 from threading import Timer
-from keyring.util.escape import escape as escape_for_ini
-from keyring.py27compat import configparser
-import keyring.backend
-from keyring.backends.file import Encrypted,BaseKeyring
-from keyring.util import properties
-
-class IPOPEncryptedKeyring(Encrypted, BaseKeyring):
-    """PyCrypto File Keyring"""
-
-    filename = 'crypted_pass.cfg'
-    pw_prefix = 'pw:'.encode()
-
-    @properties.ClassProperty
-    @classmethod
-    def priority(self):
-        "Applicable for all platforms, but not recommended."
-        try:
-            __import__('Crypto.Cipher.AES')
-            __import__('Crypto.Protocol.KDF')
-            __import__('Crypto.Random')
-        except ImportError:
-            raise RuntimeError("PyCrypto required")
-        if not json:
-            raise RuntimeError("JSON implementation such as simplejson "
-                "required.")
-        return .6
-
-    @properties.NonDataProperty
-    def keyring_key(self):
-        # _unlock or _init_file will set the key or raise an exception
-        if self._check_file():
-            self._unlock()
-        else:
-            self._init_file()
-        return self.keyring_key
-
-    def _init_file(self):
-        """
-        Initialize a new password file and set the reference password.
-        """
-        self.keyring_key = "ipop-pass"#self._get_new_password()
-        # set a reference password, used to check that the password provided
-        #  matches for subsequent checks.
-        self.set_password('keyring-setting', 'password reference',
-            'password reference value')
-
-    def _check_file(self):
-        """
-        Check if the file exists and has the expected password reference.
-        """
-        if not os.path.exists(self.file_path):
-            return False
-        self._migrate()
-        config = configparser.RawConfigParser()
-        config.read(self.file_path)
-        try:
-            config.get(
-                escape_for_ini('keyring-setting'),
-                escape_for_ini('password reference'),
-            )
-        except (configparser.NoSectionError, configparser.NoOptionError):
-            return False
-        return True
-
-    def _unlock(self):
-        """
-        Unlock this keyring by getting the password for the keyring from the
-        user.
-        """
-        self.keyring_key = "ipop-pass" #getpass.getpass(
-            #'Please enter password for encrypted keyring: ')
-        try:
-            ref_pw = self.get_password('keyring-setting', 'password reference')
-            assert ref_pw == 'password reference value'
-        except AssertionError:
-            self._lock()
-            raise ValueError("Incorrect Password")
-
-    def _lock(self):
-        """
-        Remove the keyring key from this instance.
-        """
-        del self.keyring_key
-
-    def encrypt(self, password):
-        from Crypto.Random import get_random_bytes
-        salt = get_random_bytes(self.block_size)
-        from Crypto.Cipher import AES
-        IV = get_random_bytes(AES.block_size)
-        cipher = self._create_cipher(self.keyring_key, salt, IV)
-        password_encrypted = cipher.encrypt(self.pw_prefix + password)
-        # Serialize the salt, IV, and encrypted password in a secure format
-        data = dict(
-            salt=salt, IV=IV, password_encrypted=password_encrypted,
-        )
-        for key in data:
-            data[key] = base64.encodestring(data[key]).decode()
-        return json.dumps(data).encode()
-
-    def decrypt(self, password_encrypted):
-        # unpack the encrypted payload
-        data = json.loads(password_encrypted.decode())
-        for key in data:
-            data[key] = base64.decodestring(data[key].encode())
-        cipher = self._create_cipher(self.keyring_key, data['salt'],
-            data['IV'])
-        plaintext = cipher.decrypt(data['password_encrypted'])
-        assert plaintext.startswith(self.pw_prefix)
-        return plaintext[3:]
-
-    def _migrate(self, keyring_password=None):
-        """
-        Convert older keyrings to the current format.
-        """
 
 # Set default config values
 CONFIG = {
@@ -747,10 +631,7 @@ def parse_config():
     if not ("xmpp_username" in CONFIG and "xmpp_host" in CONFIG):
         raise ValueError("At least 'xmpp_username' and 'xmpp_host' must be "
                          "specified in config file or string")
-    # Use custom keyring incase of non-interactive environment
-    # (uses a fixed password)
-    if isinstance(keyring.get_keyring(),keyring.backends.file.EncryptedKeyring):
-        keyring.set_keyring(IPOPEncryptedKeyring())
+    keyring.set_keyring(keyring.backends.file.PlaintextKeyring())
     save_password = False
     if not args.update_config:
         if "xmpp_password" in CONFIG:
@@ -784,9 +665,9 @@ def parse_config():
         try:
             keyring.set_password("ipop", CONFIG["xmpp_username"],\
                                  CONFIG["xmpp_password"])
-        except Exception, err:
-            print(traceback.format_exc())
-            raise RuntimeError("Unable to store password in the keyring")
+        except:
+            logging.error("Unable to store password in the keyring")
+            sys.exit(0)
 
     if "controller_logging" in CONFIG:
         level = getattr(logging, CONFIG["controller_logging"])
-- 
2.1.4

